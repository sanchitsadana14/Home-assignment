ANSWER1---
#include <stdio.h>
#include <stdlib.h>

int main() {
    // Write C code here
   
    struct node{
        int data;
        struct node*left;
        struct node*right;
    };
    struct node*create(int val){
        struct node*p=(struct node*)malloc(sizeof(struct node));
        p->data=val;
        p->left=NULL;
        p->right=NULL;
        return(p);
    };
    struct node * left(int val,struct node*root){
        struct node*p=create(val);
        root->left=p;
        
    };
    struct node * right(int val,struct node*root){
        struct node*p=create(val);
        root->right=p;
    };
    
    int FindMax(struct node * root)
    {
        if(root==NULL)
          return 0; 
        int max=root->data;
        int lmax=FindMax(root->left);
        int rmax=FindMax(root->right);
        
        if(lmax>max)
          max=lmax;
        if(rmax>max)
          max=rmax;
          
        return max;
    }
    struct node*root=create(1);
    left(2,root);
    right(0,root);
    left(3,root->left);
    right(4,root->left);
    printf("Maximum element is %d \n", FindMax(root));
    
  return 0;
}


ANSWER2--
#include <stdio.h>
#include <stdlib.h>

int main() {
    // Write C code here
   
    struct node{
        int data;
        struct node*left;
        struct node*right;
    };
    struct node*create(int val){
        struct node*p=(struct node*)malloc(sizeof(struct node));
        p->data=val;
        p->left=NULL;
        p->right=NULL;
        return(p);
    };
    struct node * left(int val,struct node * root){
        struct node*p=create(val);
        root->left=p;
        
    };
    struct node * right(int val,struct node*root){
        struct node*p=create(val);
        root->right=p;
    };
    
    int FindElement(int search, struct node * root)
    {
        if(root==NULL)
        return 0;
        
        int temp=root->data;
        int temp1=FindElement(search, root->left);
        int temp2=FindElement(search, root->right);
        
        if(temp==search || temp1==search || temp2==search)
          printf("SEARCHED ELEMENT IS FOUND IN TREE!");
        else
          return 0;
    }
    
    struct node*root=create(1);
    left(2,root);
    right(0,root);
    left(3,root->left);
    right(4,root->left);
    FindElement(1,root);
    
    
  return 0;
}

ANSWER3---
#include <stdio.h>
#include <stdlib.h>

int main() {
    // Write C code here
   
    struct node{
        int data;
        struct node*left;
        struct node*right;
    };
    struct node*create(int val){
        struct node*p=(struct node*)malloc(sizeof(struct node));
        p->data=val;
        p->left=NULL;
        p->right=NULL;
        return(p);
    };
    struct node * left(int val,struct node * root){
        struct node*p=create(val);
        root->left=p;
        
    };
    struct node * right(int val,struct node*root){
        struct node*p=create(val);
        root->right=p;
    };
    
    int FindSize(struct node * root)
    {
        int cnt;
        if(root==NULL)
         return 0;
         
        FindSize(root->left);
        FindSize(root->right);
        cnt+=1;
        
        return cnt;
     }
    
    struct node*root=create(1);
    left(2,root);
    right(0,root);
    left(3,root->left);
    right(4,root->left);
    printf("Size of the Binary Tree is %d\n", FindSize(root));
    
    return 0;
}


ANSWER4---
#include <stdio.h>
#include <stdlib.h>

int main() {
    // Write C code here
    // Online C compiler to run C program online
    
    struct node
    {
        int data;
        struct node * left;
        struct node * right;
    };
     
     struct node * create(int val)
     {
         struct node * p=(struct node*)malloc(sizeof(struct node));
         p->left=NULL;
         p->right=NULL;
         p->data=val;
         return (p);
     };
     
     struct node * LC(int val, struct node * root)
     {
         struct node * p=create(val);
         root->left=p;
     };
     
      struct node * RC(int val, struct node * root)
     {
         struct node * p=create(val);
         root->right=p;
     };
     
     struct node * Inorder(struct node * root)
     {
         printf("%d->", root->data);
         Inorder(root->left);
         Inorder(root->right);
     };
     
     struct node * inOrderPredecessor(struct node * root) 
     {
     //Rightmost child of the left Subtree
     
     root=root->left;
       while(root->right !=NULL) {
        root=root->right;
       };
     
        return (root);
     };
     
     struct node * DeleteNode(struct node * root, int val)
     {
         struct node * iPre;
         if(root==NULL)
          return NULL;
          
         if(root->left==NULL && root->right==NULL)// Leaf Node.
          free(root);
          return NULL;
         if(val < root->data)
          root->left = DeleteNode(root->left, val);
         else if(val > root->data)
          root->right = DeleteNode(root->right, val);
         else {
             iPre = inOrderPredecessor(root);
             root->data = iPre->data;
             root->left = DeleteNode(root->left, iPre->data);
         }
         return (root, val);
     };
     
     struct node * root=create(5);
     LC(3,root);
     RC(6,root);
     LC(1,root->left->left);
     RC(4,root->left->right);
     
     Inorder(root);
     DeleteNode(root,3);
     printf("\n");
     Inorder(root);
     
     

    return 0;
};
